#!/usr/bin/env ruby
# frozen_string_literal: true

require "json"
require "yaml"
require "net/http"

BRANCH = ENV["BUILDKITE_BRANCH"] || "master"
IS_PULL_REQUEST = ENV.fetch("BUILDKITE_PULL_REQUEST_BASE_BRANCH", "") != ""

DOCKER_COMPOSE_PLUGIN = "docker-compose#v2.6.0"

File.read(File.expand_path("../rails.gemspec", __dir__)) =~ /required_ruby_version[^0-9]+([0-9]+\.[0-9]+)/
MIN_RUBY = Gem::Version.new($1 || "2.0")

def available_tags_for_image(image)
  uri = URI("https://registry.hub.docker.com/v1/repositories/#{image}/tags")
  json = Net::HTTP.get(uri)
  JSON.parse(json).map { |x| x["name"] }
end

RUBIES =
  available_tags_for_image("ruby").
  grep(/\A[0-9]+\.[0-9]+\z/).
  map { |s| Gem::Version.new(s) }.
  select { |v| v >= MIN_RUBY }.
  sort.
  map { |v| "ruby:#{v}" }

ONE_RUBY = RUBIES.last

STEPS = []

def image_name_for(ruby)
  "#{ruby.tr(":", "-")}-${BUILDKITE_BUILD_ID}"
end

def step_for(subdirectory, rake_task, ruby: nil)
  label = +"#{subdirectory} #{rake_task.sub(/[:_]test|test:/, "")}"
  label.sub!(/ test/, "")
  if ruby
    label << " (#{ruby.sub(/^ruby:|:latest$/, "")})"
  end

  if rake_task.start_with?("mysql2:")
    rake_task = "db:mysql:rebuild #{rake_task}"
  elsif rake_task.start_with?("postgresql:")
    rake_task = "db:postgresql:rebuild #{rake_task}"
  end

  command = "cd #{subdirectory} && bundle exec rake #{rake_task}"
  command = "yarn install && #{command}" if subdirectory == "actioncable" && rake_task == "test:integration"

  timeout = 30

  group =
    if rake_task.include?("isolated")
      "isolated"
    else
      ruby || ONE_RUBY
    end

  hash = {
    "label" => label,
    "command" => "sh -c '#{command}'",
    "group" => group,
    "plugins" => {
      DOCKER_COMPOSE_PLUGIN => {
        "run" => "default",
        "pull" => "base",
        "config" => ".buildkite/docker-compose.yml",
      },
    },
    "env" => {
      "IMAGE_NAME" => "973266071021.dkr.ecr.us-east-1.amazonaws.com/builds:#{image_name_for(ruby || ONE_RUBY)}",
    },
    "timeout_in_minutes" => timeout,
  }

  yield hash if block_given?

  STEPS << hash
end

def steps_for(subdirectory, rake_task, &block)
  RUBIES.each do |ruby|
    step_for(subdirectory, rake_task, ruby: ruby, &block)
  end
end

# GROUP 1: Runs additional isolated tests for non-PR builds
%w(
  actionpack      test
  actionmailer    test
  activemodel     test
  activesupport   test
  actionview      test
  activejob       test
  activerecord    mysql2:test
  activerecord    postgresql:test
  activerecord    sqlite3:test
).each_slice(2) do |dir, task|
  steps_for(dir, task)

  next if IS_PULL_REQUEST
  next if BRANCH != "master" && BRANCH !~ /\A[0-9-]+(?:-stable)?\z/

  if task.match?(/:test/)
    step_for(dir, task.sub(":test", ":isolated_test"))
  else
    step_for(dir, "#{task}:isolated")
  end
end

# GROUP 2: No isolated tests, runs for each supported ruby
%w(
  actioncable     test
  actioncable     test:integration
  activestorage   test
  actionmailbox   test
  actiontext      test
  guides          test
).each_slice(2) do |dir, task|
  steps_for(dir, task)
end

# GROUP 3: Special cases

step_for("actionview", "test:ujs")
step_for("activerecord", "sqlite3_mem:test")
step_for("activerecord", "mysql2:test") do |x|
  x["label"] += " [mariadb]"
  x["env"]["MYSQL_SERVICE"] = "mariadb"
end
steps_for("activejob", "test:integration") do |x|
  x["plugins"][DOCKER_COMPOSE_PLUGIN]["run"] = "activejob"
end
steps_for("railties", "test") do |x|
  x["parallelism"] = 8
end

###

STEPS.sort_by! do |step|
  [
    -step["timeout_in_minutes"],
    step["group"] == "isolated" ? 2 : 1,
    step["command"].include?("test:") ? 2 : 1,
    step["label"],
  ]
end

groups = STEPS.group_by { |s| s.delete("group") }.map do |group, steps|
  { "group" => group, "steps" => steps }
end

puts YAML.dump("steps" => [
  "wait",
  {
    "group" => "build",
    "steps" => [
      *RUBIES.map do |ruby|
        {
          "label" => ":docker: #{ruby}",
          "plugins" => {
            DOCKER_COMPOSE_PLUGIN => {
              "build" => "base",
              "config" => ".buildkite/docker-compose.yml",
              "image-name" => image_name_for(ruby),
              "image-repository" => "973266071021.dkr.ecr.us-east-1.amazonaws.com/builds",
            },
          },
          "env" => {
            "RUBY_IMAGE" => ruby,
          },
          "timeout_in_minutes" => 15,
        }
      end,
    ],
  },
  "wait",
  *groups,
])
